#include <gtest/gtest.h>

TEST(FlatMapTest, DefaultConstructor) {
  FlatMap map;
  EXPECT_TRUE(map.empty());
  EXPECT_EQ(map.size(), 0);
}

TEST(FlatMapTest, InsertAndContains) {
  FlatMap map;
  EXPECT_TRUE(map.insert("John", {25, 70}));
  EXPECT_TRUE(map.contains("John"));
  EXPECT_FALSE(map.contains("Jane"));
}

TEST(FlatMapTest, Erase) {
  FlatMap map;
  map.insert("John", {25, 70});
  EXPECT_TRUE(map.erase("John"));
  EXPECT_FALSE(map.contains("John"));
}

TEST(FlatMapTest, OperatorBracket) {
  FlatMap map;
  map["John"] = {25, 70};
  EXPECT_EQ(map["John"].age, 25);
  EXPECT_EQ(map["John"].weight, 70);
  // Test insertion by operator[]
  EXPECT_EQ(map["Jane"].age, 0); // Default value
  EXPECT_EQ(map["Jane"].weight, 0); // Default value
}

TEST(FlatMapTest, AtMethod) {
  FlatMap map;
  map.insert("John", {25, 70});
  EXPECT_EQ(map.at("John").age, 25);
  EXPECT_EQ(map.at("John").weight, 70);
  EXPECT_THROW(map.at("Jane"), std::out_of_range);
}

TEST(FlatMapTest, SizeAndEmpty) {
  FlatMap map;
  EXPECT_TRUE(map.empty());
  EXPECT_EQ(map.size(), 0);
  map.insert("John", {25, 70});
  EXPECT_FALSE(map.empty());
  EXPECT_EQ(map.size(), 1);
}

TEST(FlatMapTest, Swap) {
  FlatMap map1;
  map1.insert("John", {25, 70});
  FlatMap map2;
  map2.insert("Jane", {30, 60});
  map1.swap(map2);
  EXPECT_EQ(map1.at("Jane").age, 30);
  EXPECT_EQ(map1.at("Jane").weight, 60);
  EXPECT_EQ(map2.at("John").age, 25);
  EXPECT_EQ(map2.at("John").weight, 70);
}

TEST(FlatMapTest, EqualityOperators) {
  FlatMap map1;
  map1.insert("John", {25, 70});
  FlatMap map2;
  map2.insert("John", {25, 70});
  EXPECT_TRUE(map1 == map2);
  EXPECT_FALSE(map1 != map2);
  map2.insert("Jane", {30, 60});
  EXPECT_FALSE(map1 == map2);
  EXPECT_TRUE(map1 != map2);
}

int main(int argc, char **argv) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
